{"ast":null,"code":"'use strict';\n\nclass TFNUtility {\n  constructor(isUpdatedVersion) {\n    // TO DO\n    // remove old & new version flag\n    this.weights = [1, 4, 3, 7, 5, 8, 6, 9, 10];\n    this.modulo = 11;\n    this.isUpdatedVersion = isUpdatedVersion || true;\n  }\n\n  generateTempTFN() {\n    const digits = this.isUpdatedVersion ? 9 : 8;\n    return new Array(digits).fill(0).map(() => {\n      return this.generateRandomNum(digits);\n    });\n  }\n\n  generateSortedPairs(nums) {\n    return this.weights.map((weight, index) => {\n      return {\n        weight: weight,\n        value: nums[index]\n      };\n    }).sort((x, y) => y.weight - x.weight);\n  }\n\n  getSum(pairs) {\n    return pairs.reduce((acc, cur) => acc + cur.weight * cur.value, 0);\n  }\n\n  isTFNValid(tfn) {\n    const sum = this.getSum(this.generateSortedPairs(tfn));\n\n    if (sum % this.modulo !== 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  refactorTFN(tfn) {\n    const pairs = this.generateSortedPairs(tfn);\n    const sum = this.getSum(pairs);\n    const remainder = sum % this.modulo;\n    let targetPair = {};\n    console.log('remainder: ', remainder);\n\n    if (remainder === 2) {\n      // the num 2 is not in the weights list, so using the smaller num (1) instead\n      targetPair = pairs[pairs.length - 1];\n      targetPair.value = targetPair.value - 2;\n    } else {\n      // for other weight, subtract the corresponding value by 1\n      targetPair = pairs.find(pair => pair.weight === remainder); // if targetPair.value === 0;\n      // handle here\n\n      if (targetPair.value >= 1) {\n        targetPair.value = targetPair.value - 1;\n      }\n    }\n\n    const reorderedPairs = new Array(tfn.length);\n    pairs.forEach(pair => {\n      const index = this.weights.findIndex(weight => weight === pair.weight);\n      reorderedPairs[index] = pair;\n    });\n    console.log('reorder: ', reorderedPairs);\n    return reorderedPairs.map(pair => pair.value);\n  } //generate a num between min(include) and max(exclude)\n\n\n  generateRandomNum(max, min = 0) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  getTFN() {\n    let tfn = this.generateTempTFN();\n    console.log('f: ', tfn);\n\n    if (!this.isTFNValid(tfn)) {\n      tfn = this.refactorTFN(tfn);\n    } // temp solution\n\n\n    const tfnNumber = +tfn.join('');\n\n    if (!tfnNumber || tfnNumber <= 0 || tfn.length !== 9) {\n      this.getTFN();\n      console.log('>>>>>>>>>>>>>>>>>>>>');\n      console.log('Wrong Number: ', tfn);\n      console.log('<<<<<<<<<<<<<<<<<<<<');\n    }\n\n    return tfnNumber;\n  }\n\n}\n\nmodule.exports = new TFNUtility();","map":{"version":3,"sources":["/Users/liangchenzhou/Documents/test-project/v2-app-utility/utils/tfn/tfn.js"],"names":["TFNUtility","constructor","isUpdatedVersion","weights","modulo","generateTempTFN","digits","Array","fill","map","generateRandomNum","generateSortedPairs","nums","weight","index","value","sort","x","y","getSum","pairs","reduce","acc","cur","isTFNValid","tfn","sum","refactorTFN","remainder","targetPair","console","log","length","find","pair","reorderedPairs","forEach","findIndex","max","min","Math","floor","random","getTFN","tfnNumber","join","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nclass TFNUtility {\n  constructor(isUpdatedVersion) {\n    // TO DO\n    // remove old & new version flag\n    this.weights = [1, 4, 3, 7, 5, 8, 6, 9, 10];\n    this.modulo = 11;\n    this.isUpdatedVersion = isUpdatedVersion || true;\n  }\n\n  generateTempTFN() {\n    const digits = this.isUpdatedVersion ? 9 : 8;\n    return new Array(digits).fill(0).map(() => {\n      return this.generateRandomNum(digits);\n    });\n  }\n\n  generateSortedPairs(nums) {\n    return this.weights\n      .map((weight, index) => {\n        return {\n          weight: weight,\n          value: nums[index],\n        };\n      })\n      .sort((x, y) => y.weight - x.weight);\n  }\n\n  getSum(pairs) {\n    return pairs.reduce((acc, cur) => acc + cur.weight * cur.value, 0);\n  }\n\n  isTFNValid(tfn) {\n    const sum = this.getSum(this.generateSortedPairs(tfn));\n    if (sum % this.modulo !== 0) {\n      return false;\n    }\n    return true;\n  }\n\n  refactorTFN(tfn) {\n    const pairs = this.generateSortedPairs(tfn);\n    const sum = this.getSum(pairs);\n    const remainder = sum % this.modulo;\n    let targetPair = {};\n    console.log('remainder: ', remainder);\n    if (remainder === 2) {\n      // the num 2 is not in the weights list, so using the smaller num (1) instead\n      targetPair = pairs[pairs.length - 1];\n      targetPair.value = targetPair.value - 2;\n    } else {\n      // for other weight, subtract the corresponding value by 1\n      targetPair = pairs.find((pair) => pair.weight === remainder);\n      // if targetPair.value === 0;\n      // handle here\n      if (targetPair.value >= 1) {\n        targetPair.value = targetPair.value - 1;\n      }\n    }\n    const reorderedPairs = new Array(tfn.length);\n    pairs.forEach((pair) => {\n      const index = this.weights.findIndex((weight) => weight === pair.weight);\n      reorderedPairs[index] = pair;\n    });\n    console.log('reorder: ', reorderedPairs);\n    return reorderedPairs.map((pair) => pair.value);\n  }\n\n  //generate a num between min(include) and max(exclude)\n  generateRandomNum(max, min = 0) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  getTFN() {\n    let tfn = this.generateTempTFN();\n\n    console.log('f: ', tfn);\n    if (!this.isTFNValid(tfn)) {\n      tfn = this.refactorTFN(tfn);\n    }\n    // temp solution\n    const tfnNumber = +tfn.join('');\n    if (!tfnNumber || tfnNumber <= 0 || tfn.length !== 9) {\n      this.getTFN();\n      console.log('>>>>>>>>>>>>>>>>>>>>');\n      console.log('Wrong Number: ', tfn);\n      console.log('<<<<<<<<<<<<<<<<<<<<');\n    }\n\n    return tfnNumber;\n  }\n}\n\nmodule.exports = new TFNUtility();\n"]},"metadata":{},"sourceType":"script"}